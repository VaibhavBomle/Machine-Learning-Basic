# -*- coding: utf-8 -*-
"""DiabetesPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-qFgVnURAKaDGPavtXVSFsan-8xeXL_O

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis

PIMA Diabeted Dataset
"""

# loading the dataset diabetes to a pandas DataFrame
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

#pd.read_csv?  # get all read_csv method details.

diabetes_dataset.head()

# number of rows and column
diabetes_dataset.shape

# getting the statistical meaures of the data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0 -->  Non-Diabetic

1 --> Diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

# seperating data and label
X = diabetes_dataset.drop(columns= 'Outcome', axis = 1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

"""Data StandardScaler"""

scaler = StandardScaler()

scaler.fit(X)

standardized_Data =scaler.transform(X)

print(standardized_Data)

X = standardized_Data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

"""Train Test Split"""

X_train,X_test,Y_train,Y_test  = train_test_split(X,Y,test_size = 0.2,stratify = Y,random_state = 2)

print(X.shape,X_train.shape,X_test.shape)

"""Training the Model"""

classifier = svm.SVC(kernel='linear')

# Training the support vector Machine Classifier
classifier.fit(X_train,Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

# accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('Accuracy score of the test data : ',test_data_accuracy)

"""Making a Predictive system"""

#input_data = (4,110,92,0,0,37.6,0.191,30)

input_data = (7,220,70,0,1,22.6,0.122,10)

# changing the input_DAta to numpy array
input_data_as_numpy_array = np.asarray(input_data)


# reshape the array as we are predicting for one instance
input_data_reshape = input_data_as_numpy_array.reshape(1,-1)

# standardize the input data

std_data = scaler.transform(input_data_reshape)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if prediction[0] == 0:
  print('The person is not diabetic')
else:
  print('The preson is diabetic')