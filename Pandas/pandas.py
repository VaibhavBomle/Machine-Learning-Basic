# -*- coding: utf-8 -*-
"""pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EMQdJ0Jq9joR1EmlLBN_oiTchLHKR4O9

Pandas Library:
Useful for Data Processing & Analysis

Pandas Data Frame:
Pandas DataFram is two-dimensional tabular data structure with labeled axes (rows and column).
"""

# importing the pandas library
import pandas as pd
import numpy as np

"""creating a Pandas DataFrame"""

# Importing the boston house price data
from sklearn.datasets import fetch_california_housing

housing = fetch_california_housing()
type(housing)

print(housing)

# Pandas DataFrame
housing_df = pd.DataFrame(housing.data, columns=housing.feature_names)

# first 5 rows
housing_df.head()

type(housing)

# Last 5 rows
housing_df.tail()

housing_df.info()

"""Importing the data from a CSV file to a pandas DataFrame"""

# csv file to pandas df
diabetes_df = pd.read_csv('/content/diabetes.csv')

type(diabetes_df)

diabetes_df.head()

diabetes_df.tail()

diabetes_df.shape

"""Loading the data from a excel file to a Pandas DataFrame:
pd.read_excel("filename")
"""

housing_df.to_csv('housing.csv')

"""Exporting the Pandas DataFrame to an excel File:
df.to_excel('filename')
"""

# creating a DataFrame with random values
random_df = pd.DataFrame(np.random.rand(20,10))
random_df.head()

random_df.shape

# first 5 rows in a DataFrame
housing_df.head()

#  last 5 rows of the DataFream
housing_df.tail()

# Information about the data frame
housing_df.info()

# Finding the number of missing values
housing_df.isnull().sum()

# diabetes data frame
diabetes_df.head()

# Converting the values based on the labels
diabetes_df.value_counts('Outcome')

# Group the values based on the mean
diabetes_df.groupby('Outcome').mean()

"""Statistical Measures"""

# count or number of values in each column
housing_df.count()

# mean value - column wise
housing_df.mean()

# standard deviation - column wise
housing_df.std()

# minimun value in each colum
housing_df.min()

# maximum value in each column
housing_df.max()

# all the statistical measures about the dataFrame
housing_df.describe()

"""Manipulating a DataFrame"""

# Adding a column to a dataFrame
housing_df['Price'] = housing.target

housing_df.head()

# Removing a perticular row
housing_df.drop(index=0,axis=0)

# Removing a perticular column
housing_df.drop(columns='Longitude',axis=1)

# Locate a row using the index value
housing_df.iloc[2]

# Locate a column using the index value
housing_df.iloc[:,0] # first column
housing_df.iloc[:,1] # second column
housing_df.iloc[:,2] # third column
housing_df.iloc[:,-1] # last column

"""Correlaton:
1. Positive correlation
2. Negative correlation
"""

housing_df.corr()