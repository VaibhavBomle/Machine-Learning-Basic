# -*- coding: utf-8 -*-
"""spamMailPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17pUj0lSHylv9VquUd18iXTBrlC-O53ua

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection & Pre-Processing"""

# loading the data from csv file to a panda Dataframe
raw_mail_data = pd.read_csv('/content/mail_data.csv')

print(raw_mail_data)

# replace the null values with a null string
mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)),'')

# printing the first 5 rows of the dataframe
mail_data.head()

# checking the number of rows and columns in the dataframe
mail_data.shape

"""Label encoding"""

# label spam mal as 0; hum mail as 1;
mail_data.loc[mail_data['Category'] == 'spam', 'Category',] = 0
mail_data.loc[mail_data['Category'] == 'ham', 'Category',] = 1

"""spam --> 0

ham  --> 1
"""

# separating the data as texts and label
X = mail_data['Message']
Y = mail_data['Category']

print(X)

print(Y)

"""Splitting the data into training data and test data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.2,random_state=3)

print(X.shape,X_train.shape,X_test.shape)

"""Feature Extraction"""

# Transform the text data to feature vectors that can be used as input to the Logistic regression
feature_extraction = TfidfVectorizer(min_df = 1,stop_words = 'english',lowercase=True)

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# Convert Y_train and Y_test values as Integers

Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

print(X_train)

print(X_train_features)

"""Training the Model

Logistic Regression
"""

model = LogisticRegression()

# training the Logistic Regression model with the reaining data
model.fit(X_train_features,Y_train)

"""Evaluating the trained model"""

# Prediction on training data

prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train,prediction_on_training_data)

print('Accuracy on trainingdata : ',accuracy_on_training_data)

# Prediction on test data

prediction_on_test_data = model.predict(X_test_features)
accuracy_on_test_data = accuracy_score(Y_test,prediction_on_test_data)

print('Accuracy on test data : ',accuracy_on_test_data)

"""Building a Predictive System"""

#input_mail = ["Nah I don't think he goes to usf, he lives around here though"]
input_mail = ["You have an important customer service announcement. Call FREEPHONE 0800 542 0825 now!"]
# convert text to feature vectors
input_data_features = feature_extraction.transform(input_mail)

# making prediction
prediction = model.predict(input_data_features)
print(prediction)

if(prediction[0] == 1):
  print("Ham mail")
else :
  print("Spam mail")